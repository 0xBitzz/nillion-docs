What is Nillion Python Client?
===============================

This module presents a full fledged Nillion dealer node, connecting directly to the Nillion network via the underlying libp2p and cryptographic subsystem.


What can this Nillion Python Client do?
=====================
- Store data on Nillion network with privacy and secrecy
- Retrieve data from Nillion network (when user key permissions allow)
- Delete secrets on the Nillion network
- Manage permissions of new or existing secrets or programs on the Nillion network
- Execute computations with Nillion programs
- Upload programs to Nillion network
- Connect to Nillion network with or without a relay proxy

What is not supported?
======================

Arbitrary message channels
--------------------------

The Nillion network doesn’t yet have arbitrary message channels, event listeners, or notifications.

A party is aware of secrets (referenced by `store_id`) by performing the storage operation via the nillion client. Other participants who have been given permissions to the secret need to be notified of the `store_id` using a different solution. 

Another use case related to store id exchange is the need to exchange peer ids.

In the nilmsg demo app, we must first exchange peer ids and secret ids prior to “nilmsg message exchange”

Authentication
--------------

Nillion has not yet built key management for node keys and user keys.

Both user and node keys are required in the browser js client as the js client is a dealer.

Identity system
---------------

The Nillion network does not have an identity system or naming for users yet. Once a party has their `user_id`, they need to communicate it to other parties using a different solution. 

.. code-block:: py3

    # get your user id
    nillion_client = nillion.NillionClient(
    	nodekey, bootnodes, nillion.ConnectionMode.relay(), **userkey**, payments_config,
    )
    user_id = nillion_client.user_id()
    # communicate your user id to other parties


Secret filtering by tag or label
--------------------------------

The Nillion network does not support tagging or labeling secrets yet, so it is not possible to filter or search for secrets by criteria within the network.

Secrets are stored with a `secret_name` , resulting in the secret `store_id`. You need to know both and have proper permission to access the secret.

.. code-block:: py3

    # store a secret
    secrets_object = nillion.Secrets({secret_name: secret})
    store_id = await nillion_client.store_secrets(
          cluster_id, None, secrets_object, permissions
    )
    # communicate store_id and secret_name to parties with permissions

List all permissioned secrets
-----------------------------

The Nillion network does not have a “list all” function for permissioned secrets yet. In order to retrieve a secret you need to know the `store_id` and `secret_name`, which need to be saved using a different solution.

.. code-block:: py3

    # retrieve a secret
    stored_secret = await nillion_client.retrieve_secret(
    	cluster_id, args.store_id, secret_name
    )
